name: Test - Linter & Playwright
on:
  workflow_dispatch:
    inputs:
      APPIUM:
        description: 'Use Appium-based test flow'
        required: false
        type: boolean
        default: false

      ENV:
        description: 'Appium: Test environment (e.g. nightly, production, beta)'
        required: true
        default: 'nightly'

      VERSION:
        description: 'Version'
        required: true
        default: '0.6.3'

      RUNNING_OS:
        description: 'Appium: OS running test (win, mac, linux)'
        required: true
        default: 'win'


      TEST_FILES:
        description: 'Appium: Test files to run'
        required: true
        default: 'test/specs/test.homePage.ts'

      OPEN_AI:
        description: 'Appium: OpenAI API Key'
        required: false
        default: ''

  push:
    branches:
      - main
      - dev
    paths:
      - 'electron/**'
      - .github/workflows/jan-electron-linter-and-test.yml
      - 'web/**'
      - 'joi/**'
      - 'package.json'
      - 'node_modules/**'
      - 'yarn.lock'
      - 'core/**'
      - 'extensions/**'
      - '!README.md'
      - 'Makefile'

  pull_request:
    branches:
      - main
      - dev
      - release/**
    paths:
      - 'electron/**'
      - .github/workflows/jan-electron-linter-and-test.yml
      - 'web/**'
      - 'joi/**'
      - 'package.json'
      - 'node_modules/**'
      - 'yarn.lock'
      - 'Makefile'
      - 'extensions/**'
      - 'core/**'
      - 'src-tauri/**'
      - 'web-app/**'
      - '!README.md'

jobs:
  base_branch_cov:
    if: ${{ !inputs.APPIUM }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          make config-yarn
          yarn
          yarn build:core

      - name: Run test coverage
        run: yarn test:coverage

      - name: Upload code coverage for ref branch
        uses: actions/upload-artifact@v4
        with:
          name: ref-lcov.info
          path: ./coverage/lcov.info

  test-on-macos:
    if: ${{ !inputs.APPIUM && (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    runs-on: macos-latest
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set IS_TEST environment variable
        run: |
          echo "IS_TEST=true" >> $GITHUB_ENV

      - name: 'Cleanup cache'
        continue-on-error: true
        run: |
          rm -rf ~/jan
          make clean

      - name: Get Commit Message for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}})" >> $GITHUB_ENV

      - name: Get Commit Message for push event
        if: github.event_name == 'push'
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}})" >> $GITHUB_ENV

      - name: Linter and test
        run: |
          make test
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'

  test-on-macos-pr-target:
    if: ${{ !inputs.APPIUM && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: macos-latest
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: 'Cleanup cache'
        continue-on-error: true
        run: |
          rm -rf ~/jan
          make clean

      - name: Linter and test
        run: |
          make test
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'

  test-on-windows:
    if: ${{ !inputs.APPIUM && github.event_name == 'push' }}
    strategy:
      fail-fast: false
      matrix:
        antivirus-tools: ['mcafee', 'default-windows-security', 'bit-defender']
    runs-on: windows-desktop-${{ matrix.antivirus-tools }}
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install tauri-driver dependencies
        run: |
          cargo install tauri-driver --locked

      - name: 'Cleanup cache'
        shell: powershell
        continue-on-error: true
        run: |
          $path = "$Env:APPDATA\jan"
          if (Test-Path $path) {
              Remove-Item "\\?\$path" -Recurse -Force
          } else {
              Write-Output "Folder does not exist."
          }
          make clean

      - name: Get Commit Message for push event
        if: github.event_name == 'push'
        shell: bash
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}}" >> $GITHUB_ENV

      - name: Linter and test
        shell: powershell
        run: |
          make test

  test-on-windows-pr:
    if: ${{ !inputs.APPIUM && (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'workflow_dispatch') }}
    runs-on: windows-desktop-mcafee
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # - name: Download and Replace ALL Microsoft Edge WebDriver v137
      #   shell: powershell
      #   run: |
      #     $ErrorActionPreference = "Stop"

      #     Write-Output "=== SYSTEM PATH ==="
      #     $env:PATH -split ';' | ForEach-Object { Write-Output "  - $_" }

      #     # Step 1: Find all msedgedriver.exe in PATH
      #     $driverPaths = @()
      #     $env:PATH -split ';' | ForEach-Object {
      #       $candidate = Join-Path $_ "msedgedriver.exe"
      #       if (Test-Path $candidate) {
      #         $driverPaths += $candidate
      #       }
      #     }

      #     if ($driverPaths.Count -eq 0) {
      #       Write-Output "`n❌ No existing msedgedriver.exe found in PATH"
      #       exit 1
      #     }

      #     Write-Output "`n=== Existing EdgeDriver Locations ==="
      #     $driverPaths | ForEach-Object { Write-Output "  - $_" }

      #     # Step 2: Download the new version
      #     $url = "https://msedgedriver.microsoft.com/137.0.3296.93/edgedriver_win64.zip"
      #     Write-Output "`nDownloading EdgeDriver from $url"
      #     Invoke-WebRequest -Uri $url -OutFile "edgedriver.zip"

      #     # Step 3: Extract it
      #     Expand-Archive -Path "edgedriver.zip" -DestinationPath "edgedriver" -Force
      #     $newDriverPath = Resolve-Path "edgedriver/msedgedriver.exe"
      #     Write-Output "`n=== New EdgeDriver Downloaded ==="
      #     Write-Output "  Path: $newDriverPath"

      #     # Step 4: Replace all existing msedgedriver.exe
      #     Write-Output "`n=== Replacing All EdgeDrivers ==="
      #     foreach ($target in $driverPaths) {
      #       Copy-Item $newDriverPath $target -Force
      #       Write-Output "  → Replaced: $target"
      #     }
      #     Copy-Item $newDriverPath C:\ProgramData\Chocolatey\bin\ -Force

      #     # Step 5: Show version
      #     Write-Output "`n=== EdgeDriver Version After Update ==="
      #     foreach ($target in $driverPaths) {
      #       & $target --version
      #     }

      - name: Install tauri-driver dependencies
        run: |
          cargo install tauri-driver --locked

      - name: 'Cleanup cache'
        shell: powershell
        continue-on-error: true
        run: |
          $path = "$Env:APPDATA\jan"
          if (Test-Path $path) {
              Remove-Item "\\?\$path" -Recurse -Force
          } else {
              Write-Output "Folder does not exist."
          }
          make clean

      - name: Get Commit Message for PR
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}}" >> $GITHUB_ENV

      - name: Linter and test
        shell: powershell
        run: |
          make test

  test-on-windows-pr-target:
    if: ${{ !inputs.APPIUM && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: windows-latest
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Install tauri-driver dependencies
        run: |
          cargo install tauri-driver --locked

      - name: 'Cleanup cache'
        shell: powershell
        continue-on-error: true
        run: |
          $path = "$Env:APPDATA\jan"
          if (Test-Path $path) {
              Remove-Item "\\?\$path" -Recurse -Force
          } else {
              Write-Output "Folder does not exist."
          }
          make clean

      - name: Linter and test
        shell: powershell
        run: |
          make test

  test-on-ubuntu:
    if: ${{ !inputs.APPIUM && (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Tauri dependencies
        run: |
          sudo apt update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libpango1.0-dev libgtk-3-dev libsoup-3.0-dev libwebkit2gtk-4.1-dev librsvg2-dev libfuse2 webkit2gtk-driver

      - name: Install tauri-driver dependencies
        run: |
          cargo install tauri-driver --locked

      - name: 'Cleanup cache'
        continue-on-error: true
        run: |
          rm -rf ~/jan
          make clean

      - name: Get Commit Message for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.event.after}}" >> $GITHUB_ENV

      - name: Get Commit Message for push event
        if: github.event_name == 'push'
        run: |
          echo "REPORT_PORTAL_DESCRIPTION=${{github.sha}}" >> $GITHUB_ENV

      - name: Linter and test
        run: |
          export DISPLAY=$(w -h | awk 'NR==1 {print $2}')
          echo -e "Display ID: $DISPLAY"
          make test

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: electron/playwright-report/
          retention-days: 2

  test-on-ubuntu-pr-target:
    if: ${{ !inputs.APPIUM && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: ubuntu-latest
    steps:
      - name: Getting the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Tauri dependencies
        run: |
          sudo apt update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libpango1.0-dev libgtk-3-dev libsoup-3.0-dev libwebkit2gtk-4.1-dev librsvg2-dev libfuse2 webkit2gtk-driver

      - name: Install tauri-driver dependencies
        run: |
          cargo install tauri-driver --locked

      - name: 'Cleanup cache'
        continue-on-error: true
        run: |
          rm -rf ~/jan
          make clean

      - name: Linter and test
        run: |
          export DISPLAY=$(w -h | awk 'NR==1 {print $2}')
          echo -e "Display ID: $DISPLAY"
          make test

  test-on-windows-with-appium:
    if: ${{ inputs.APPIUM }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Appium + Windows Driver
        run: |
          npm install -g appium
          appium driver install windows
          appium -v

      - name: Install test dependencies
        run: |
          cd src-tauri/src/tests
          npm install

      - name: Download and install the app
        run: |
          $installer = "$env:USERPROFILE\AppInstaller.exe"
          $envValue = "${{ inputs.ENV }}"
          $version = "${{ inputs.VERSION }}"
          if ($envValue -eq "nightly") {
            Invoke-WebRequest "https://delta.jan.ai/nightly/Jan-nightly_${version}_x64-setup.exe" -OutFile $installer
          } elseif ($envValue -eq "production") {
            Invoke-WebRequest "https://github.com/menloresearch/jan/releases/download/v${version}/Jan_${version}_x64-setup.exe" -OutFile $installer
          } elseif ($envValue -eq "beta") {
            Invoke-WebRequest "https://github.com/menloresearch/jan/releases/download/v${version}-beta/Jan-beta_${version}-beta_x64-setup.exe" -OutFile $installer
          } else {
            Write-Error "Unknown ENV: $envValue"
            exit 1
          }
          Start-Process -FilePath $installer -ArgumentList "/silent" -Wait
        shell: pwsh

      - name: Enable Developer Mode (required for WinAppDriver)
        run: |
          reg add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"
        shell: powershell

      - name: Start WinAppDriver
        run: |
          Start-Process -FilePath "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe"
        shell: powershell

      - name: Start Appium on custom port
        run: |
          taskkill /IM node.exe /F 2>$null
          cmd /C "start /B appium -p 4725"

      - name: Wait for Appium to start
        run: Start-Sleep -Seconds 10

      - name: Create .env for test
        run: |
          $envFile = "src-tauri/src/tests/.env"
          $envValue = "${{ inputs.ENV }}"
          if (Test-Path $envFile) { Remove-Item $envFile }
          if ($envValue -eq "nightly") {
            echo "APP_PATH=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan-nightly\\Jan-nightly.exe" >> $envFile
          } elseif ($envValue -eq "production") {
            echo "APP_PATH=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan\\Jan.exe" >> $envFile
          } elseif ($envValue -eq "beta") {
            echo "APP_PATH=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan-beta\\Jan-beta.exe" >> $envFile
          }
          if ($envValue -eq "nightly") {
            echo "BUNDLE_ID=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan-nightly\\Jan-nightly.exe" >> $envFile
          } elseif ($envValue -eq "production") {
            echo "BUNDLE_ID=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan\\Jan.exe" >> $envFile
          } elseif ($envValue -eq "beta") {
            echo "BUNDLE_ID=C:\\Users\\runneradmin\\AppData\\Local\\Programs\\Jan-beta\\Jan-beta.exe" >> $envFile
          }
          echo "RUNNING_OS=${{ github.event.inputs.RUNNING_OS }}" >> $envFile
          echo "TEST_FILES=${{ github.event.inputs.TEST_FILES }}" >> $envFile
          echo "ENV=${{ github.event.inputs.ENV }}" >> $envFile
          echo "OPENAI=${{ github.event.inputs.OPEN_AI }}" >> $envFile
        shell: pwsh

      - name: Run WebdriverIO tests
        run: |
          cd src-tauri/src/tests
          npm run test
