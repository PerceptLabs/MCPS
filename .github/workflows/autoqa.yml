name: Auto QA Test Runner

on:
  workflow_dispatch:
    inputs:
      jan_app_url_windows:
        description: 'URL to download Jan app for Windows (.exe)'
        required: true
        type: string
        default: 'https://catalog.jan.ai/windows/Jan-nightly_0.6.4-726_x64-setup.exe'
      jan_app_url_ubuntu:
        description: 'URL to download Jan app for Ubuntu (.deb)'
        required: true
        type: string
        default: 'https://catalog.jan.ai/linux/Jan-nightly_0.6.4-726_amd64.deb'
      jan_app_url_macos:
        description: 'URL to download Jan app for macOS (.dmg)'
        required: true
        type: string
        default: 'https://catalog.jan.ai/macos/Jan-nightly-0.6.4-726.dmg'
      is_nightly:
        description: 'Is this a nightly build?'
        required: true
        type: boolean
        default: true
  push:
    branches:
      - feat/auto-qa
      - main
      - develop
    paths:
      - 'autoqa/**'
      - '.github/workflows/autoqa.yml'

jobs:
  windows:
    runs-on: windows-11-nvidia-gpu
    timeout-minutes: 60

    env:
      # Default Jan app URL - can be overridden by repository variable JAN_APP_URL
      DEFAULT_JAN_APP_URL: 'https://catalog.jan.ai/windows/Jan-nightly_0.6.4-726_x64-setup.exe'
      DEFAULT_IS_NIGHTLY: 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Clean existing Jan installations
        shell: powershell
        run: |
          Write-Host "Cleaning existing Jan installations..."

          # Remove Jan data folders (both regular and nightly)
          $janAppData = "$env:APPDATA\Jan"
          $janNightlyAppData = "$env:APPDATA\Jan-nightly"

          if (Test-Path $janAppData) {
            Write-Host "Removing $janAppData"
            Remove-Item -Path $janAppData -Recurse -Force -ErrorAction SilentlyContinue
          }

          if (Test-Path $janNightlyAppData) {
            Write-Host "Removing $janNightlyAppData"
            Remove-Item -Path $janNightlyAppData -Recurse -Force -ErrorAction SilentlyContinue
          }

          # Kill any running Jan processes (both regular and nightly)
          Get-Process -Name "Jan" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "jan" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "Jan-nightly" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "jan-nightly" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

          Write-Host "Jan cleanup completed"

      - name: Download Jan app
        shell: powershell
        run: |
          # Determine Jan app URL and nightly flag from multiple sources (priority order):
          # 1. Workflow dispatch input (manual trigger)
          # 2. Repository variable JAN_APP_URL
          # 3. Default URL from env

          $janAppUrl = ""
          $isNightly = $false

          if ("${{ github.event.inputs.jan_app_url_windows }}" -ne "") {
            $janAppUrl = "${{ github.event.inputs.jan_app_url_windows }}"
            $isNightly = [System.Convert]::ToBoolean("${{ github.event.inputs.is_nightly }}")
            Write-Host "Using Jan app URL from workflow input: $janAppUrl"
            Write-Host "Is nightly build: $isNightly"
          }
          elseif ("${{ vars.JAN_APP_URL }}" -ne "") {
            $janAppUrl = "${{ vars.JAN_APP_URL }}"
            $isNightly = [System.Convert]::ToBoolean("${{ vars.IS_NIGHTLY }}")
            Write-Host "Using Jan app URL from repository variable: $janAppUrl"
            Write-Host "Is nightly build: $isNightly"
          }
          else {
            $janAppUrl = "$env:DEFAULT_JAN_APP_URL"
            $isNightly = [System.Convert]::ToBoolean("$env:DEFAULT_IS_NIGHTLY")
            Write-Host "Using default Jan app URL: $janAppUrl"
            Write-Host "Is nightly build: $isNightly"
          }

          # Set environment variables for later steps
          echo "JAN_APP_URL=$janAppUrl" >> $env:GITHUB_ENV
          echo "IS_NIGHTLY=$isNightly" >> $env:GITHUB_ENV

          Write-Host "Downloading Jan app from: $janAppUrl"

          $downloadPath = "$env:TEMP\jan-installer.exe"

          try {
            # Use wget for better performance
            wget.exe "$janAppUrl" -O "$downloadPath"

            if (Test-Path $downloadPath) {
              $fileSize = (Get-Item $downloadPath).Length
              Write-Host "Downloaded Jan app successfully. Size: $fileSize bytes"
              Write-Host "File saved to: $downloadPath"
            } else {
              throw "Downloaded file not found"
            }
          }
          catch {
            Write-Error "Failed to download Jan app: $_"
            exit 1
          }

      - name: Install Jan app
        shell: powershell
        run: |
          $installerPath = "$env:TEMP\jan-installer.exe"
          $isNightly = [System.Convert]::ToBoolean("$env:IS_NIGHTLY")

          Write-Host "Installing Jan app..."
          Write-Host "Is nightly build: $isNightly"

          # Try silent installation first
          try {
            Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait -NoNewWindow
            Write-Host "Jan app installed silently"
          }
          catch {
            Write-Host "Silent installation failed, trying normal installation..."
            Start-Process -FilePath $installerPath -Wait -NoNewWindow
          }

          # Wait a bit for installation to complete
          Start-Sleep -Seconds 10

          # Verify installation based on nightly flag
          if ($isNightly) {
            $defaultJanPath = "$env:LOCALAPPDATA\Programs\jan-nightly\Jan-nightly.exe"
            $processName = "Jan-nightly.exe"
          } else {
            $defaultJanPath = "$env:LOCALAPPDATA\Programs\jan\Jan.exe"
            $processName = "Jan.exe"
          }

          if (Test-Path $defaultJanPath) {
            Write-Host "Jan app installed successfully at: $defaultJanPath"
            echo "JAN_APP_PATH=$defaultJanPath" >> $env:GITHUB_ENV
            echo "JAN_PROCESS_NAME=$processName" >> $env:GITHUB_ENV
          } else {
            Write-Warning "Jan app not found at expected location: $defaultJanPath"
            Write-Host "Will auto-detect during test run"
          }

      - name: Install Python dependencies
        working-directory: autoqa
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Auto QA Tests
        working-directory: autoqa
        shell: powershell
        env:
          RP_TOKEN: ${{ secrets.RP_TOKEN }}
          ENABLE_REPORTPORTAL: 'true'
          RP_ENDPOINT: 'https://reportportal.menlo.ai'
          RP_PROJECT: 'default_personal'
          MAX_TURNS: '50'
          DELAY_BETWEEN_TESTS: '3'
          LAUNCH_NAME: 'CI AutoQA Run Windows - ${{ github.run_number }} - ${{ github.ref_name }}'
        run: |
          Write-Host "Starting Auto QA Tests..."

          # Determine parameters based on detected Jan app
          $janAppPath = $env:JAN_APP_PATH
          $processName = $env:JAN_PROCESS_NAME

          Write-Host "Jan app path: $janAppPath"
          Write-Host "Process name: $processName"

          # Run the main test with proper arguments
          if ($janAppPath -and $processName) {
            python main.py --enable-reportportal --rp-token "$env:RP_TOKEN" --jan-app-path "$janAppPath" --jan-process-name "$processName"
          } elseif ($janAppPath) {
            python main.py --enable-reportportal --rp-token "$env:RP_TOKEN" --jan-app-path "$janAppPath"
          } else {
            python main.py --enable-reportportal --rp-token "$env:RP_TOKEN"
          }

      - name: Cleanup after tests
        if: always()
        shell: powershell
        run: |
          Write-Host "Cleaning up after tests..."

          # Kill any running Jan processes (both regular and nightly)
          Get-Process -Name "Jan" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "jan" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "Jan-nightly" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name "jan-nightly" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

          # Remove Jan data folders (both regular and nightly)
          $janAppData = "$env:APPDATA\Jan"
          $janNightlyAppData = "$env:APPDATA\Jan-nightly"

          if (Test-Path $janAppData) {
            Write-Host "Removing $janAppData"
            Remove-Item -Path $janAppData -Recurse -Force -ErrorAction SilentlyContinue
          }

          if (Test-Path $janNightlyAppData) {
            Write-Host "Removing $janNightlyAppData"
            Remove-Item -Path $janNightlyAppData -Recurse -Force -ErrorAction SilentlyContinue
          }

          # Try to uninstall Jan app silently
          try {
            $isNightly = [System.Convert]::ToBoolean("$env:IS_NIGHTLY")

            # Determine uninstaller path based on nightly flag
            if ($isNightly) {
              $uninstallerPath = "$env:LOCALAPPDATA\Programs\jan-nightly\uninstall.exe"
              $installPath = "$env:LOCALAPPDATA\Programs\jan-nightly"
            } else {
              $uninstallerPath = "$env:LOCALAPPDATA\Programs\jan\uninstall.exe"
              $installPath = "$env:LOCALAPPDATA\Programs\jan"
            }

            Write-Host "Looking for uninstaller at: $uninstallerPath"

            if (Test-Path $uninstallerPath) {
              Write-Host "Found uninstaller, attempting silent uninstall..."
              Start-Process -FilePath $uninstallerPath -ArgumentList "/S" -Wait -NoNewWindow -ErrorAction SilentlyContinue
              Write-Host "Uninstall completed"
            } else {
              Write-Host "No uninstaller found, attempting manual cleanup..."

              if (Test-Path $installPath) {
                Write-Host "Removing installation directory: $installPath"
                Remove-Item -Path $installPath -Recurse -Force -ErrorAction SilentlyContinue
              }
            }

            Write-Host "Jan app cleanup completed"
          }
          catch {
            Write-Warning "Failed to uninstall Jan app cleanly: $_"
            Write-Host "Manual cleanup may be required"
          }

          # Clean up downloaded installer
          $installerPath = "$env:TEMP\jan-installer.exe"
          if (Test-Path $installerPath) {
            Remove-Item -Path $installerPath -Force -ErrorAction SilentlyContinue
          }

          Write-Host "Cleanup completed"

  ubuntu:
    runs-on: ubuntu-22-04-nvidia-gpu
    timeout-minutes: 60

    env:
      # Default Jan app URL for Linux - can be overridden by repository variable JAN_APP_URL_LINUX
      DEFAULT_JAN_APP_URL: 'https://delta.jan.ai/nightly/Jan-nightly_0.6.4-728_amd64.deb'
      DEFAULT_IS_NIGHTLY: 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            x11-utils \
            python3-tk \
            python3-dev \
            wmctrl \
            xdotool \
            libnss3-dev \
            libgconf-2-4 \
            libxss1 \
            libasound2 \
            libxtst6 \
            libgtk-3-0 \
            libgbm-dev \
            libxshmfence1 \
            libxrandr2 \
            libpangocairo-1.0-0 \
            libatk1.0-0 \
            libcairo-gobject2 \
            libgdk-pixbuf2.0-0 \
            gnome-screenshot

      - name: Clean existing Jan installations
        run: |
          echo "Cleaning existing Jan installations..."

          # Remove Jan data folders (both regular and nightly)
          rm -rf ~/.config/Jan
          rm -rf ~/.config/Jan-nightly
          rm -rf ~/.local/share/Jan
          rm -rf ~/.local/share/Jan-nightly

          # Kill any running Jan processes (both regular and nightly)
          pkill -f "Jan" || true
          pkill -f "jan" || true
          pkill -f "Jan-nightly" || true
          pkill -f "jan-nightly" || true

          echo "Jan cleanup completed"

      - name: Download Jan app
        run: |
          # Determine Jan app URL and nightly flag from multiple sources (priority order):
          # 1. Workflow dispatch input (manual trigger)
          # 2. Repository variable JAN_APP_URL_LINUX
          # 3. Default URL from env

          JAN_APP_URL=""
          IS_NIGHTLY=false

          if [ -n "${{ github.event.inputs.jan_app_url_ubuntu }}" ]; then
            JAN_APP_URL="${{ github.event.inputs.jan_app_url_ubuntu }}"
            IS_NIGHTLY="${{ github.event.inputs.is_nightly }}"
            echo "Using Jan app URL from workflow input: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          elif [ -n "${{ vars.JAN_APP_URL_LINUX }}" ]; then
            JAN_APP_URL="${{ vars.JAN_APP_URL_LINUX }}"
            IS_NIGHTLY="${{ vars.IS_NIGHTLY }}"
            echo "Using Jan app URL from repository variable: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          else
            JAN_APP_URL="$DEFAULT_JAN_APP_URL"
            IS_NIGHTLY="$DEFAULT_IS_NIGHTLY"
            echo "Using default Jan app URL: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          fi

          # Set environment variables for later steps
          echo "JAN_APP_URL=$JAN_APP_URL" >> $GITHUB_ENV
          echo "IS_NIGHTLY=$IS_NIGHTLY" >> $GITHUB_ENV

          echo "Downloading Jan app from: $JAN_APP_URL"

          DOWNLOAD_PATH="/tmp/jan-installer.deb"

          # Download the package
          if ! wget "$JAN_APP_URL" -O "$DOWNLOAD_PATH"; then
            echo "Failed to download Jan app"
            exit 1
          fi

          if [ -f "$DOWNLOAD_PATH" ]; then
            FILE_SIZE=$(stat -c%s "$DOWNLOAD_PATH")
            echo "Downloaded Jan app successfully. Size: $FILE_SIZE bytes"
            echo "File saved to: $DOWNLOAD_PATH"
          else
            echo "Downloaded file not found"
            exit 1
          fi

      - name: Install Jan app
        run: |
          INSTALLER_PATH="/tmp/jan-installer.deb"
          IS_NIGHTLY="$IS_NIGHTLY"

          echo "Installing Jan app..."
          echo "Is nightly build: $IS_NIGHTLY"

          # Install the .deb package
          sudo apt install "$INSTALLER_PATH" -y
          sudo apt-get install -f -y

          # Wait for installation to complete
          sleep 10

          # Verify installation based on nightly flag
          if [ "$IS_NIGHTLY" = "true" ]; then
            DEFAULT_JAN_PATH="/usr/bin/Jan-nightly"
            PROCESS_NAME="Jan-nightly"
          else
            DEFAULT_JAN_PATH="/usr/bin/Jan"
            PROCESS_NAME="Jan"
          fi

          if [ -f "$DEFAULT_JAN_PATH" ]; then
            echo "Jan app installed successfully at: $DEFAULT_JAN_PATH"
            echo "JAN_APP_PATH=$DEFAULT_JAN_PATH" >> $GITHUB_ENV
            echo "JAN_PROCESS_NAME=$PROCESS_NAME" >> $GITHUB_ENV
          else
            echo "Jan app not found at expected location: $DEFAULT_JAN_PATH"
            echo "Will auto-detect during test run"
          fi

      - name: Install Python dependencies
        working-directory: autoqa
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Auto QA Tests
        working-directory: autoqa
        env:
          RP_TOKEN: ${{ secrets.RP_TOKEN }}
          ENABLE_REPORTPORTAL: 'true'
          RP_ENDPOINT: 'https://reportportal.menlo.ai'
          RP_PROJECT: 'default_personal'
          MAX_TURNS: '50'
          DELAY_BETWEEN_TESTS: '3'
          LAUNCH_NAME: 'CI AutoQA Run Ubuntu - ${{ github.run_number }} - ${{ github.ref_name }}'
          LINUX_MODE: 'true'
          USE_WINDOW_DETECTION: 'false'
        run: |
          echo "Starting Auto QA Tests..."

          # Get the current display session
          export DISPLAY=$(w -h | awk 'NR==1 {print $2}')
          echo -e "Display ID: $DISPLAY"

          # Verify display is working
          if [ -z "$DISPLAY" ]; then
            echo "No display session found, falling back to :0"
            export DISPLAY=:0
          fi

          echo "Using display: $DISPLAY"

          # Test display connection
          xdpyinfo -display $DISPLAY >/dev/null 2>&1 || {
            echo "Display $DISPLAY is not available"
            exit 1
          }

          # Make Jan executable if needed
          if [ -f "/usr/bin/Jan-nightly" ]; then
            sudo chmod +x /usr/bin/Jan-nightly
          fi
          if [ -f "/usr/bin/Jan" ]; then
            sudo chmod +x /usr/bin/Jan
          fi

          # Determine parameters based on detected Jan app
          JAN_APP_PATH="$JAN_APP_PATH"
          PROCESS_NAME="$JAN_PROCESS_NAME"

          echo "Jan app path: $JAN_APP_PATH"
          echo "Process name: $PROCESS_NAME"

          # Run the main test with proper arguments
          if [ -n "$JAN_APP_PATH" ] && [ -n "$PROCESS_NAME" ]; then
            python main.py --enable-reportportal --rp-token "$RP_TOKEN" --jan-app-path "$JAN_APP_PATH" --jan-process-name "$PROCESS_NAME"
          elif [ -n "$JAN_APP_PATH" ]; then
            python main.py --enable-reportportal --rp-token "$RP_TOKEN" --jan-app-path "$JAN_APP_PATH"
          else
            python main.py --enable-reportportal --rp-token "$RP_TOKEN"
          fi

      - name: Cleanup after tests
        if: always()
        run: |
          echo "Cleaning up after tests..."

          # Kill any running Jan processes (both regular and nightly)
          pkill -f "Jan" || true
          pkill -f "jan" || true
          pkill -f "Jan-nightly" || true
          pkill -f "jan-nightly" || true

          # Remove Jan data folders (both regular and nightly)
          rm -rf ~/.config/Jan
          rm -rf ~/.config/Jan-nightly
          rm -rf ~/.local/share/Jan
          rm -rf ~/.local/share/Jan-nightly

          # Try to uninstall Jan app
          IS_NIGHTLY="$IS_NIGHTLY"

          if [ "$IS_NIGHTLY" = "true" ]; then
            PACKAGE_NAME="jan-nightly"
          else
            PACKAGE_NAME="jan"
          fi

          echo "Attempting to uninstall package: $PACKAGE_NAME"

          if dpkg -l | grep -q "$PACKAGE_NAME"; then
            echo "Found package $PACKAGE_NAME, uninstalling..."
            sudo dpkg -r "$PACKAGE_NAME" || true
            sudo apt-get autoremove -y || true
          else
            echo "Package $PACKAGE_NAME not found in dpkg list"
          fi

          # Clean up downloaded installer
          rm -f "/tmp/jan-installer.deb"

          echo "Cleanup completed"

  macos:
    runs-on: macos-selfhosted-15-arm64
    timeout-minutes: 60

    env:
      # Default Jan app URL - can be overridden by repository variable JAN_APP_URL
      DEFAULT_JAN_APP_URL: 'https://delta.jan.ai/nightly/Jan-nightly_0.6.4-728_universal.dmg'
      DEFAULT_IS_NIGHTLY: 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Clean existing Jan installations
        run: |
          echo "Cleaning existing Jan installations..."

          # Kill any running Jan processes (both regular and nightly)
          pkill -f "Jan" || true
          pkill -f "jan" || true
          pkill -f "Jan-nightly" || true
          pkill -f "jan-nightly" || true

          # Remove Jan app directories
          rm -rf /Applications/Jan.app
          rm -rf /Applications/Jan-nightly.app
          rm -rf ~/Applications/Jan.app
          rm -rf ~/Applications/Jan-nightly.app

          # Remove Jan data folders (both regular and nightly)
          rm -rf ~/Library/Application\ Support/Jan
          rm -rf ~/Library/Application\ Support/Jan-nightly
          rm -rf ~/Library/Preferences/jan.*
          rm -rf ~/Library/Preferences/jan-nightly.*
          rm -rf ~/Library/Caches/jan.*
          rm -rf ~/Library/Caches/jan-nightly.*

          echo "Jan cleanup completed"

      - name: Download Jan app
        run: |
          # Determine Jan app URL and nightly flag from multiple sources (priority order):
          # 1. Workflow dispatch input (manual trigger)
          # 2. Repository variable JAN_APP_URL
          # 3. Default URL from env

          JAN_APP_URL=""
          IS_NIGHTLY="false"

          if [ -n "${{ github.event.inputs.jan_app_url_macos }}" ]; then
            JAN_APP_URL="${{ github.event.inputs.jan_app_url_macos }}"
            IS_NIGHTLY="${{ github.event.inputs.is_nightly }}"
            echo "Using Jan app URL from workflow input: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          elif [ -n "${{ vars.JAN_APP_URL }}" ]; then
            JAN_APP_URL="${{ vars.JAN_APP_URL }}"
            IS_NIGHTLY="${{ vars.IS_NIGHTLY }}"
            echo "Using Jan app URL from repository variable: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          else
            JAN_APP_URL="$DEFAULT_JAN_APP_URL"
            IS_NIGHTLY="$DEFAULT_IS_NIGHTLY"
            echo "Using default Jan app URL: $JAN_APP_URL"
            echo "Is nightly build: $IS_NIGHTLY"
          fi

          # Export for later steps
          echo "JAN_APP_URL=$JAN_APP_URL" >> $GITHUB_ENV
          echo "IS_NIGHTLY=$IS_NIGHTLY" >> $GITHUB_ENV

          echo "Downloading Jan app from: $JAN_APP_URL"
          curl -L -o "/tmp/jan-installer.dmg" "$JAN_APP_URL"

          if [ ! -f "/tmp/jan-installer.dmg" ]; then
            echo "❌ Failed to download Jan app"
            exit 1
          fi

          echo "✅ Successfully downloaded Jan app"
          ls -la "/tmp/jan-installer.dmg"

      - name: Install Jan app
        run: |
          echo "Installing Jan app from DMG..."

          # Mount the DMG
          hdiutil attach "/tmp/jan-installer.dmg" -mountpoint "/tmp/jan-mount"

          # Find the .app file in the mounted DMG
          APP_FILE=$(find "/tmp/jan-mount" -name "*.app" -type d | head -1)

          if [ -z "$APP_FILE" ]; then
            echo "❌ No .app file found in DMG"
            hdiutil detach "/tmp/jan-mount" || true
            exit 1
          fi

          echo "Found app file: $APP_FILE"

          # Copy to Applications directory
          cp -R "$APP_FILE" /Applications/

          # Unmount the DMG
          hdiutil detach "/tmp/jan-mount"

          # Determine app name and executable path
          APP_NAME=$(basename "$APP_FILE")

          echo "App name: $APP_NAME"

          # First, check what's actually in the MacOS folder
          echo "Contents of MacOS folder:"
          ls -la "/Applications/$APP_NAME/Contents/MacOS/"          # Find all executable files in MacOS folder
          echo "Looking for executable files..."
          find "/Applications/$APP_NAME/Contents/MacOS/" -type f -perm +111 -ls

          # Try to find the main executable - it's usually the one with the same name as the app (without .app)
          APP_BASE_NAME=$(basename "$APP_NAME" .app)
          POTENTIAL_EXECUTABLES=(
            "/Applications/$APP_NAME/Contents/MacOS/$APP_BASE_NAME"
            "/Applications/$APP_NAME/Contents/MacOS/Jan"
            "/Applications/$APP_NAME/Contents/MacOS/Jan-nightly"
          )

          APP_PATH=""
          for potential_exec in "${POTENTIAL_EXECUTABLES[@]}"; do
            echo "Checking: $potential_exec"
            if [ -f "$potential_exec" ] && [ -x "$potential_exec" ]; then
              APP_PATH="$potential_exec"
              echo "Found executable: $APP_PATH"
              break
            fi
          done

          # If still not found, get any executable file
          if [ -z "$APP_PATH" ]; then
            echo "No predefined executable found, searching for any executable..."
            APP_PATH=$(find "/Applications/$APP_NAME/Contents/MacOS/" -type f -perm +111 | head -1)
          fi

          if [ -z "$APP_PATH" ]; then
            echo "❌ No executable found in MacOS folder"
            ls -la "/Applications/$APP_NAME/Contents/MacOS/"
            exit 1
          fi

          PROCESS_NAME=$(basename "$APP_PATH")

          echo "App installed at: /Applications/$APP_NAME"
          echo "Executable path: $APP_PATH"
          echo "Process name: $PROCESS_NAME"

          # Export for test step
          echo "JAN_APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "PROCESS_NAME=$PROCESS_NAME" >> $GITHUB_ENV

          # Verify installation
          if [ -f "$APP_PATH" ]; then
            echo "✅ Jan app installed successfully"
            ls -la "/Applications/$APP_NAME"
          else
            echo "❌ Jan app installation failed - executable not found"
            exit 1
          fi

      - name: Install system dependencies
        run: |
          echo "Installing system dependencies for macOS..."

          # Check if Homebrew is available
          if command -v brew >/dev/null 2>&1; then
            echo "Homebrew is available"
            
            # Install python-tk if not available
            python3 -c "import tkinter" 2>/dev/null || {
              echo "Installing python-tk via Homebrew..."
              brew install python-tk || true
            }
          else
            echo "Homebrew not available, checking if tkinter works..."
            python3 -c "import tkinter" || {
              echo "⚠️ tkinter not available and Homebrew not found"
              echo "This may cause issues with mouse control"
            }
          fi

          echo "System dependencies check completed"

      - name: Install Python dependencies
        run: |
          cd autoqa
          echo "Installing Python dependencies..."
          pip install --upgrade pip
          pip install -r requirements-mac.txt
          echo "✅ Python dependencies installed"

      - name: Setup ReportPortal environment
        run: |
          echo "Setting up ReportPortal environment..."

          # Set ReportPortal token from secret
          echo "RP_TOKEN=${{ secrets.RP_TOKEN }}" >> $GITHUB_ENV

          echo "ReportPortal environment configured"

      - name: Run E2E tests
        run: |
          cd autoqa
          echo "Starting E2E test execution..."

          echo "Environment variables:"
          echo "JAN_APP_PATH: $JAN_APP_PATH"
          echo "PROCESS_NAME: $PROCESS_NAME"
          echo "IS_NIGHTLY: $IS_NIGHTLY"

          # Verify Jan app path
          if [ ! -f "$JAN_APP_PATH" ]; then
            echo "❌ Jan app not found at: $JAN_APP_PATH"
            echo "Available files in /Applications:"
            ls -la /Applications/ | grep -i jan || echo "No Jan apps found"
            exit 1
          fi

          echo "Jan app path: $JAN_APP_PATH"
          echo "Process name: $PROCESS_NAME"

          # Run the main test with proper arguments
          if [ -n "$JAN_APP_PATH" ] && [ -n "$PROCESS_NAME" ]; then
            python main.py --enable-reportportal --rp-token "$RP_TOKEN" --jan-app-path "$JAN_APP_PATH" --jan-process-name "$PROCESS_NAME"
          elif [ -n "$JAN_APP_PATH" ]; then
            python main.py --enable-reportportal --rp-token "$RP_TOKEN" --jan-app-path "$JAN_APP_PATH"
          else
            python main.py --enable-reportportal --rp-token "$RP_TOKEN"
          fi

      - name: Cleanup after tests
        if: always()
        run: |
          echo "Cleaning up after tests..."

          # Kill any running Jan processes (both regular and nightly)
          pkill -f "Jan" || true
          pkill -f "jan" || true
          pkill -f "Jan-nightly" || true
          pkill -f "jan-nightly" || true

          # Remove Jan app directories
          rm -rf /Applications/Jan.app
          rm -rf /Applications/Jan-nightly.app
          rm -rf ~/Applications/Jan.app
          rm -rf ~/Applications/Jan-nightly.app

          # Remove Jan data folders (both regular and nightly)
          rm -rf ~/Library/Application\ Support/Jan
          rm -rf ~/Library/Application\ Support/Jan-nightly
          rm -rf ~/Library/Preferences/jan.*
          rm -rf ~/Library/Preferences/jan-nightly.*
          rm -rf ~/Library/Caches/jan.*
          rm -rf ~/Library/Caches/jan-nightly.*

          # Clean up downloaded installer
          rm -f "/tmp/jan-installer.dmg"
          rm -rf "/tmp/jan-mount"

          echo "Cleanup completed"
