/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MiniAppsImport } from './routes/mini-apps'
import { Route as HelpImport } from './routes/help'
import { Route as IndexImport } from './routes/index'
import { Route as ThreadsThreadIdImport } from './routes/threads/$threadId'
import { Route as SettingsShortcutsImport } from './routes/settings/shortcuts'
import { Route as SettingsPrivacyImport } from './routes/settings/privacy'
import { Route as SettingsModelProvidersImport } from './routes/settings/model-providers'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsAppearanceImport } from './routes/settings/appearance'

// Create/Update Routes

const MiniAppsRoute = MiniAppsImport.update({
  id: '/mini-apps',
  path: '/mini-apps',
  getParentRoute: () => rootRoute,
} as any)

const HelpRoute = HelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ThreadsThreadIdRoute = ThreadsThreadIdImport.update({
  id: '/threads/$threadId',
  path: '/threads/$threadId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsShortcutsRoute = SettingsShortcutsImport.update({
  id: '/settings/shortcuts',
  path: '/settings/shortcuts',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPrivacyRoute = SettingsPrivacyImport.update({
  id: '/settings/privacy',
  path: '/settings/privacy',
  getParentRoute: () => rootRoute,
} as any)

const SettingsModelProvidersRoute = SettingsModelProvidersImport.update({
  id: '/settings/model-providers',
  path: '/settings/model-providers',
  getParentRoute: () => rootRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => rootRoute,
} as any)

const SettingsAppearanceRoute = SettingsAppearanceImport.update({
  id: '/settings/appearance',
  path: '/settings/appearance',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpImport
      parentRoute: typeof rootRoute
    }
    '/mini-apps': {
      id: '/mini-apps'
      path: '/mini-apps'
      fullPath: '/mini-apps'
      preLoaderRoute: typeof MiniAppsImport
      parentRoute: typeof rootRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/settings/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceImport
      parentRoute: typeof rootRoute
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof rootRoute
    }
    '/settings/model-providers': {
      id: '/settings/model-providers'
      path: '/settings/model-providers'
      fullPath: '/settings/model-providers'
      preLoaderRoute: typeof SettingsModelProvidersImport
      parentRoute: typeof rootRoute
    }
    '/settings/privacy': {
      id: '/settings/privacy'
      path: '/settings/privacy'
      fullPath: '/settings/privacy'
      preLoaderRoute: typeof SettingsPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/settings/shortcuts': {
      id: '/settings/shortcuts'
      path: '/settings/shortcuts'
      fullPath: '/settings/shortcuts'
      preLoaderRoute: typeof SettingsShortcutsImport
      parentRoute: typeof rootRoute
    }
    '/threads/$threadId': {
      id: '/threads/$threadId'
      path: '/threads/$threadId'
      fullPath: '/threads/$threadId'
      preLoaderRoute: typeof ThreadsThreadIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/help': typeof HelpRoute
  '/mini-apps': typeof MiniAppsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/model-providers': typeof SettingsModelProvidersRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/help': typeof HelpRoute
  '/mini-apps': typeof MiniAppsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/model-providers': typeof SettingsModelProvidersRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/help': typeof HelpRoute
  '/mini-apps': typeof MiniAppsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/model-providers': typeof SettingsModelProvidersRoute
  '/settings/privacy': typeof SettingsPrivacyRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/help'
    | '/mini-apps'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/model-providers'
    | '/settings/privacy'
    | '/settings/shortcuts'
    | '/threads/$threadId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/help'
    | '/mini-apps'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/model-providers'
    | '/settings/privacy'
    | '/settings/shortcuts'
    | '/threads/$threadId'
  id:
    | '__root__'
    | '/'
    | '/help'
    | '/mini-apps'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/model-providers'
    | '/settings/privacy'
    | '/settings/shortcuts'
    | '/threads/$threadId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HelpRoute: typeof HelpRoute
  MiniAppsRoute: typeof MiniAppsRoute
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsModelProvidersRoute: typeof SettingsModelProvidersRoute
  SettingsPrivacyRoute: typeof SettingsPrivacyRoute
  SettingsShortcutsRoute: typeof SettingsShortcutsRoute
  ThreadsThreadIdRoute: typeof ThreadsThreadIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HelpRoute: HelpRoute,
  MiniAppsRoute: MiniAppsRoute,
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsModelProvidersRoute: SettingsModelProvidersRoute,
  SettingsPrivacyRoute: SettingsPrivacyRoute,
  SettingsShortcutsRoute: SettingsShortcutsRoute,
  ThreadsThreadIdRoute: ThreadsThreadIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/help",
        "/mini-apps",
        "/settings/appearance",
        "/settings/general",
        "/settings/model-providers",
        "/settings/privacy",
        "/settings/shortcuts",
        "/threads/$threadId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/help": {
      "filePath": "help.tsx"
    },
    "/mini-apps": {
      "filePath": "mini-apps.tsx"
    },
    "/settings/appearance": {
      "filePath": "settings/appearance.tsx"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx"
    },
    "/settings/model-providers": {
      "filePath": "settings/model-providers.tsx"
    },
    "/settings/privacy": {
      "filePath": "settings/privacy.tsx"
    },
    "/settings/shortcuts": {
      "filePath": "settings/shortcuts.tsx"
    },
    "/threads/$threadId": {
      "filePath": "threads/$threadId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
